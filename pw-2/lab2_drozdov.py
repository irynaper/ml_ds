# -*- coding: utf-8 -*-
"""
Created on Wed Mar 12 14:18:10 2025

@author: Danylo
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

# CSS
st.markdown("""
    <style>
    /* –°—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ */
    h1 {
        color: #2E8B57;
        text-align: center;
        font-size: 36px;
    }
    h2, h3 {
        color: #4682B4;
    }
    h6 {
        color: #2E8B57;
        text-align: right;
    }
    /* –§–æ–Ω —Å—Ç–æ—Ä—ñ–Ω–∫–∏ */
    body {
        background-color: #F8F8F8;
    }
    /* –°—Ç–∏–ª—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—å */
    table {
        width: 100%;
        background-color: white;
        border-radius: 10px;
        border-collapse: collapse;
    }
    th, td {
        padding: 10px;
        border-bottom: 1px solid #ddd;
        text-align: left;
    }
    th {
        background-color: #4682B4;
        color: white;
    }
    /* –ö–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ—è sidebar */
    .css-1d391kg {
        background-color: #F0F8FF;
    }
    </style>
""", unsafe_allow_html=True)

df = pd.read_csv("Cancer.csv")

st.title("–ê–Ω–∞–ª—ñ–∑ –¥–∞—Ç–∞—Å–µ—Ç—É Cancer")
st.write("###### –í–∏–∫–æ–Ω–∞–≤ —Å—Ç—É–¥–µ–Ω—Ç –ö–ù–¢-21-6 –î—Ä–æ–∑–¥–æ–≤ –î–∞–Ω–∏–ª–æ")

st.write("### üìù –û–ø–∏—Å –æ–∑–Ω–∞–∫ –¥–∞—Ç–∞—Å–µ—Ç—É Breast Cancer")
feature_desc = {
    "Clump Thickness": "–¢–æ–≤—â–∏–Ω–∞ —Å–∫—É–ø—á–µ–Ω—å –∫–ª—ñ—Ç–∏–Ω (1-10)",
    "Uniformity of Cell Size": "–û–¥–Ω–æ—Ä—ñ–¥–Ω—ñ—Å—Ç—å —Ä–æ–∑–º—ñ—Ä—É –∫–ª—ñ—Ç–∏–Ω (1-10)",
    "Uniformity of Cell Shape": "–û–¥–Ω–æ—Ä—ñ–¥–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∏ –∫–ª—ñ—Ç–∏–Ω (1-10)",
    "Marginal Adhesion": "–ü—Ä–∏–ª–∏–ø–∞–Ω–Ω—è –∫–ª—ñ—Ç–∏–Ω (1-10)",
    "Single Epithelial Cell Size": "–†–æ–∑–º—ñ—Ä –æ–¥–∏–Ω–æ—á–Ω–∏—Ö –µ–ø—ñ—Ç–µ–ª—ñ–∞–ª—å–Ω–∏—Ö –∫–ª—ñ—Ç–∏–Ω (1-10)",
    "Bare Nuclei": "–í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —è–¥—Ä–∞ (1-10)",
    "Bland Chromatin": "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Ö—Ä–æ–º–∞—Ç–∏–Ω—É (1-10)",
    "Normal Nucleoli": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω—É–∫–ª–µ–æ–ª —É —è–¥—Ä—ñ (1-10)",
    "Mitoses": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Ç–æ–∑—ñ–≤ (1-10)",
    "Class": "–î—ñ–∞–≥–Ω–æ–∑ (2 ‚Äì –¥–æ–±—Ä–æ—è–∫—ñ—Å–Ω–∞, 4 ‚Äì –∑–ª–æ—è–∫—ñ—Å–Ω–∞ –ø—É—Ö–ª–∏–Ω–∞)"
}

st.table(pd.DataFrame(list(feature_desc.items()), columns=["–û–∑–Ω–∞–∫–∞", "–û–ø–∏—Å"]))

st.write("### –ü–µ—Ä—à—ñ 5 —Ä—è–¥–∫—ñ–≤ –¥–∞—Ç–∞—Å–µ—Ç—É")
st.write(df.head())

X = df.drop("Class", axis=1)
y = df["Class"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

st.write("### –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –Ω–∞–≤—á–µ–Ω–æ—ó –º–æ–¥–µ–ª—ñ")
predictions_df = pd.DataFrame(X_test.copy())
predictions_df['Class'] = y_test
predictions_df['Predicted Label'] = y_pred

st.write(predictions_df.head())

st.write("### –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª—ñ")
metrics = classification_report(y_test, y_pred, output_dict=True)

metrics_df = pd.DataFrame(metrics).T
st.write(metrics_df)

fig, ax = plt.subplots(figsize=(8, 5))
sns.heatmap(pd.DataFrame(metrics).iloc[:-1, :].T, annot=True, cmap="Blues", cbar=False, ax=ax)
ax.set_title("–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª—ñ")
st.pyplot(fig)

st.write("### –†–æ–∑–ø–æ–¥—ñ–ª —Ü—ñ–ª—å–æ–≤–æ—ó –∑–º—ñ–Ω–Ω–æ—ó")
chart_type = st.radio("–¢–∏–ø –≥—Ä–∞—Ñ—ñ–∫–∞ –¥–ª—è —Ü—ñ–ª—å–æ–≤–æ—ó –∑–º—ñ–Ω–Ω–æ—ó", ["–°—Ç–æ–≤–ø—á–∏–∫–æ–≤–∏–π", "–ö—Ä—É–≥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞"])

if chart_type == "–°—Ç–æ–≤–ø—á–∏–∫–æ–≤–∏–π":
    fig, ax = plt.subplots()
    df["Class"].value_counts().plot(kind="bar", color=["blue", "orange"], ax=ax)
    ax.set_title("–†–æ–∑–ø–æ–¥—ñ–ª —Ü—ñ–ª—å–æ–≤–æ—ó –∑–º—ñ–Ω–Ω–æ—ó (Class)")
    ax.set_xlabel("–ö–ª–∞—Å (2 ‚Äì –¥–æ–±—Ä–æ—è–∫—ñ—Å–Ω–∞, 4 ‚Äì –∑–ª–æ—è–∫—ñ—Å–Ω–∞)")
    ax.set_ylabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å")
    st.pyplot(fig)

elif chart_type == "–ö—Ä—É–≥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞":
    fig, ax = plt.subplots()
    df["Class"].value_counts().plot(kind="pie", autopct='%1.1f%%', colors=["blue", "orange"], ax=ax)
    ax.set_title("–†–æ–∑–ø–æ–¥—ñ–ª —Ü—ñ–ª—å–æ–≤–æ—ó –∑–º—ñ–Ω–Ω–æ—ó (Class)")
    ax.set_ylabel("")
    st.pyplot(fig)

st.write("### –ë–æ–∫—Å–ø–ª–æ—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
selected_features = st.multiselect("–û–±–µ—Ä—ñ—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –±–æ–∫—Å–ø–ª–æ—Ç—ñ–≤", df.columns[:-1])

if selected_features:
    fig, ax = plt.subplots(figsize=(10, 6))
    df[selected_features].boxplot(ax=ax)
    ax.set_title("–†–æ–∑–ø–æ–¥—ñ–ª –∑–Ω–∞—á–µ–Ω—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
    ax.set_xticklabels(selected_features)
    st.pyplot(fig)

st.write("# –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è.")

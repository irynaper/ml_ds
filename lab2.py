import streamlit as st
import pickle
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import scipy.cluster.hierarchy as sch

from statsmodels.graphics.mosaicplot import mosaic
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix
from pycaret.classification import load_model, predict_model
from pycaret.datasets import get_data

st.markdown(
    """
    <h1 style='text-align: center; color: #FF4B4B;'>
        üöÄ –ü–ó2. –Ø—Ä–æ—à–µ–Ω–∫–æ –Ø—Ä–æ—Å–ª–∞–≤. –ö–ù–¢—É-22-1. üöÄ
    </h1>
    """,
    unsafe_allow_html=True
)
# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.title("üìä –ê–Ω–∞–ª—ñ–∑ —è–∫–æ—Å—Ç—ñ –≤–∏–Ω–∞: –ú–µ—Ç—Ä–∏–∫–∏ —Ç–∞ –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞—Ç–∞—Å–µ—Ç—É
Data = get_data('wine')

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–ø–∏—Å—É –¥–∞—Ç–∞—Å–µ—Ç—É
st.markdown("""
            # –û–ø–∏—Å –¥–∞—Ç–∞—Å–µ—Ç—É "wine.csv"

–î–∞–Ω–∏–π –¥–∞—Ç–∞—Å–µ—Ç –º—ñ—Å—Ç–∏—Ç—å —Ö—ñ–º—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–≤–æ–Ω–∏—Ö —ñ –±—ñ–ª–∏—Ö –≤–∏–Ω, –∞ —Ç–∞–∫–æ–∂ —ó—Ö–Ω—é –æ—Ü—ñ–Ω–∫—É —è–∫–æ—Å—Ç—ñ. –í—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ñ–∞–∫—Ç–æ—Ä—ñ–≤, —â–æ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ —è–∫—ñ—Å—Ç—å –≤–∏–Ω–∞, –ø–æ–±—É–¥–æ–≤–∏ –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏ —è–∫–æ—Å—Ç—ñ —Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–æ—Å–ª—ñ–¥–Ω–∏—Ü—å–∫–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö.

## –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–∞—Ç–∞—Å–µ—Ç
- –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: **6497**  
- –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–∑–Ω–∞–∫: **13**  
- –¢–∏–ø–∏ –∑–º—ñ–Ω–Ω–∏—Ö:  
  - **11 —á–∏—Å–ª–æ–≤–∏—Ö** (`float64`)  
  - **1 —Ü—ñ–ª–æ—á–∏—Å–µ–ª—å–Ω–∞** (`int64`)  
  - **1 –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∞** (`object`)  

## –û–ø–∏—Å –æ–∑–Ω–∞–∫

### –•—ñ–º—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
- **`fixed acidity` (—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ –∫–∏—Å–ª–æ—Ç–Ω—ñ—Å—Ç—å)** ‚Äì –º—ñ—Å—Ç–∫—ñ—Å—Ç—å –Ω–µ–∫–∞—Ä–±–æ–Ω–∞—Ç–Ω–∏—Ö –∫–∏—Å–ª–æ—Ç —É –≤–∏–Ω—ñ.  
  - –î—ñ–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω—å: **3.8 ‚Äì 15.9**  
  - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è: **7.21**  

- **`volatile acidity` (–ª–µ—Ç–∫–∞ –∫–∏—Å–ª–æ—Ç–Ω—ñ—Å—Ç—å)** ‚Äì –º—ñ—Å—Ç–∫—ñ—Å—Ç—å –æ—Ü—Ç–æ–≤–æ—ó –∫–∏—Å–ª–æ—Ç–∏, —â–æ –≤–ø–ª–∏–≤–∞—î –Ω–∞ —Å–º–∞–∫ –≤–∏–Ω–∞.  
  - –î—ñ–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω—å: **0.08 ‚Äì 1.58**  
  - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è: **0.34**  

- **`citric acid` (–ª–∏–º–æ–Ω–Ω–∞ –∫–∏—Å–ª–æ—Ç–∞)** ‚Äì –¥–æ–¥–∞—î –≤–∏–Ω—É —Å–≤—ñ–∂–æ—Å—Ç—ñ.  
  - –î—ñ–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω—å: **0.00 ‚Äì 1.66**  
  - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è: **0.32**  

- **`residual sugar` (–∑–∞–ª–∏—à–∫–æ–≤–∏–π —Ü—É–∫–æ—Ä)** ‚Äì –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ü—É–∫—Ä—É, —â–æ –∑–∞–ª–∏—à–∏–ª–∞—Å—è –ø—ñ—Å–ª—è –±—Ä–æ–¥—ñ–Ω–Ω—è.  
  - –î—ñ–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω—å: **0.6 ‚Äì 65.8 –≥/–ª**  
  - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è: **5.44 –≥/–ª**  

- **`chlorides` (—Ö–ª–æ—Ä–∏–¥–∏)** ‚Äì –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è —Å–æ–ª—ñ —É –≤–∏–Ω—ñ, —â–æ –≤–ø–ª–∏–≤–∞—î –Ω–∞ —Å–º–∞–∫.  
  - –î—ñ–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω—å: **0.009 ‚Äì 0.611 –≥/–ª**  
  - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è: **0.056 –≥/–ª**  

- **`free sulfur dioxide` (–≤—ñ–ª—å–Ω–∏–π –¥—ñ–æ–∫—Å–∏–¥ —Å—ñ—Ä–∫–∏)** ‚Äì –º—ñ—Å—Ç–∫—ñ—Å—Ç—å SO‚ÇÇ, —â–æ –∑–∞–ø–æ–±—ñ–≥–∞—î –æ–∫–∏—Å–ª–µ–Ω–Ω—é —Ç–∞ —Ä–æ–∑–≤–∏—Ç–∫—É –±–∞–∫—Ç–µ—Ä—ñ–π.  
  - –î—ñ–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω—å: **1 ‚Äì 289 –º–≥/–ª**  
  - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è: **30.5 –º–≥/–ª**  

- **`total sulfur dioxide` (–∑–∞–≥–∞–ª—å–Ω–∏–π –¥—ñ–æ–∫—Å–∏–¥ —Å—ñ—Ä–∫–∏)** ‚Äì –∑–∞–≥–∞–ª—å–Ω–∏–π –≤–º—ñ—Å—Ç SO‚ÇÇ, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —è–∫ –∫–æ–Ω—Å–µ—Ä–≤–∞–Ω—Ç.  
  - –î—ñ–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω—å: **6 ‚Äì 440 –º–≥/–ª**  
  - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è: **115.7 –º–≥/–ª**  

- **`density` (—â—ñ–ª—å–Ω—ñ—Å—Ç—å)** ‚Äì —â—ñ–ª—å–Ω—ñ—Å—Ç—å –≤–∏–Ω–∞, —â–æ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –≤–º—ñ—Å—Ç—É —Å–ø–∏—Ä—Ç—É —Ç–∞ —Ü—É–∫—Ä—É.  
  - –î—ñ–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω—å: **0.9871 ‚Äì 1.03898 –≥/—Å–º¬≥**  
  - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è: **0.9947 –≥/—Å–º¬≥**  

- **`pH` (–∫–∏—Å–ª–æ—Ç–Ω—ñ—Å—Ç—å)** ‚Äì —Ä—ñ–≤–µ–Ω—å pH –≤–∏–Ω–∞, —â–æ –≤–ø–ª–∏–≤–∞—î –Ω–∞ –π–æ–≥–æ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å —ñ —Å–º–∞–∫.  
  - –î—ñ–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω—å: **2.72 ‚Äì 4.01**  
  - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è: **3.22**  

- **`sulphates` (—Å—É–ª—å—Ñ–∞—Ç–∏)** ‚Äì —Ä—ñ–≤–µ–Ω—å —Å—É–ª—å—Ñ–∞—Ç—ñ–≤, —â–æ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ –∞—Ä–æ–º–∞—Ç —ñ —Å–º–∞–∫ –≤–∏–Ω–∞.  
  - –î—ñ–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω—å: **0.22 ‚Äì 2.00 –≥/–ª**  
  - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è: **0.53 –≥/–ª**  

- **`alcohol` (–∞–ª–∫–æ–≥–æ–ª—å)** ‚Äì –≤–º—ñ—Å—Ç —Å–ø–∏—Ä—Ç—É —É –≤–∏–Ω—ñ (%).  
  - –î—ñ–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω—å: **8.0 ‚Äì 14.9%**  
  - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è: **10.49%**  

### –¶—ñ–ª—å–æ–≤–∞ –∑–º—ñ–Ω–Ω–∞:
- **`quality` (—è–∫—ñ—Å—Ç—å –≤–∏–Ω–∞)** ‚Äì –æ—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ –∑–∞ —à–∫–∞–ª–æ—é –≤—ñ–¥ **3 –¥–æ 9** (—Ü—ñ–ª–æ—á–∏—Å–µ–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è).  

### –ö–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∞ –æ–∑–Ω–∞–∫–∞:
- **`type` (—Ç–∏–ø –≤–∏–Ω–∞)** ‚Äì –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∞ –æ–∑–Ω–∞–∫–∞, —â–æ –ø–æ–∑–Ω–∞—á–∞—î —Ç–∏–ø –≤–∏–Ω–∞:  
  - `"red"` ‚Äì —á–µ—Ä–≤–æ–Ω–µ –≤–∏–Ω–æ  
  - `"white"` ‚Äì –±—ñ–ª–µ –≤–∏–Ω–æ  

## –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∞—Ç–∞—Å–µ—Ç—É
–¶–µ–π –¥–∞—Ç–∞—Å–µ—Ç –¥–æ–∑–≤–æ–ª—è—î –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑ –≤–ø–ª–∏–≤—É —Ä—ñ–∑–Ω–∏—Ö —Ö—ñ–º—ñ—á–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞ —è–∫—ñ—Å—Ç—å –≤–∏–Ω–∞ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—ñ –¥–∞–Ω—ñ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ö—ñ–º—ñ—á–Ω–æ–≥–æ —Å–∫–ª–∞–¥—É.
""")

label_encoder = LabelEncoder()
Data['type'] = label_encoder.fit_transform(Data['type'])

# –ü–æ–∫–∞–∑ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–∞—Ç–∞—Å–µ—Ç–∞
if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞"):
    st.write(Data.head())

# –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
st.sidebar.header("–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
variable_description = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è:", Data.columns)
if variable_description in Data.columns:
    st.sidebar.write(f"**{variable_description}**: –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π...")

# –í—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
x_axis = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Å–∏ X:", Data.columns)
y_axis = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Å–∏ Y:", Data.columns)
color = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ü–≤–µ—Ç–∞:", Data.columns)

# –ü–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π
range_slider = st.sidebar.slider(
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π:",
    min_value=float(Data[x_axis].min()),
    max_value=float(Data[x_axis].max()),
    value=(float(Data[x_axis].min()), float(Data[x_axis].max()))
)

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
filtered_data = Data[(Data[x_axis] >= range_slider[0]) & (Data[x_axis] <= range_slider[1])]

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
st.header("üìà –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫")
fig = px.scatter(filtered_data, x=x_axis, y=y_axis, color=color, title=f"{x_axis} vs {y_axis}")
st.plotly_chart(fig)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
st.sidebar.header("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
show_histogram = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É")

if show_histogram:
    hist_axis = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã:", Data.columns)
    fig_hist = px.histogram(filtered_data, x=hist_axis, title=f"–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ {hist_axis}")
    st.plotly_chart(fig_hist)

# Boxplot –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
if st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å Boxplot"):
    boxplot_axis = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è Boxplot:", Data.columns)
    fig_box = px.box(filtered_data, y=boxplot_axis, title=f"Boxplot {boxplot_axis}")
    st.plotly_chart(fig_box)

# Heatmap –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å Heatmap –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"):
    st.header("–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
    corr = Data.corr()
    fig_heatmap = px.imshow(corr, text_auto=True, title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
    st.plotly_chart(fig_heatmap)

# 3D-–≥—Ä–∞—Ñ–∏–∫
if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å 3D-–≥—Ä–∞—Ñ–∏–∫"):
    st.header("3D-–≥—Ä–∞—Ñ–∏–∫")
    x_3d = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Å–∏ X (3D):", Data.columns)
    y_3d = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Å–∏ Y (3D):", Data.columns)
    z_3d = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Å–∏ Z (3D):", Data.columns)
    fig_3d = px.scatter_3d(Data, x=x_3d, y=y_3d, z=z_3d, color=color, title=f"3D-–≥—Ä–∞—Ñ–∏–∫: {x_3d}, {y_3d}, {z_3d}")
    st.plotly_chart(fig_3d)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
st.header("ü§ñ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏")
if st.checkbox("–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –∏ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
    model = load_model('C:/Users/Dasha/final_rf_model')  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏
    st.write("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü 'type' –≤ —á–∏—Å–ª–æ–≤–æ–π
    label_encoder = LabelEncoder()
    Data['type'] = label_encoder.fit_transform(Data['type'])

    # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
    y_test = Data['quality']
    X_test = Data.drop(columns=['quality'])
    predictions = predict_model(model, data=X_test)
    y_pred = predictions['prediction_label']

    # –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏
    st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
    recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
    f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

    st.write(f"**–¢–æ—á–Ω–æ—Å—Ç—å (Accuracy):** {accuracy:.4f}")
    st.write(f"**Precision:** {precision:.4f}")
    st.write(f"**Recall:** {recall:.4f}")
    st.write(f"**F1-score:** {f1:.4f}")

    # –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
    st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
    conf_matrix = confusion_matrix(y_test, y_pred)
    fig_conf_matrix = px.imshow(conf_matrix, text_auto=True, title="–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
    st.plotly_chart(fig_conf_matrix)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
st.header("üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")

# –ü–∞—Ä–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏"):
    st.subheader("–ü–∞—Ä–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏")
    pair_plot_vars = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ä–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤:", Data.columns, default=['alcohol', 'pH', 'quality'])
    fig_pair = sns.pairplot(Data[pair_plot_vars], hue='quality' if 'quality' in pair_plot_vars else None)
    st.pyplot(fig_pair)

# KDE-–≥—Ä–∞—Ñ–∏–∫
if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å KDE-–≥—Ä–∞—Ñ–∏–∫"):
    st.subheader("KDE-–≥—Ä–∞—Ñ–∏–∫")
    kde_x = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è KDE:", Data.columns)
    fig_kde = px.density_contour(Data, x=kde_x, title=f"KDE-–≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {kde_x}")
    st.plotly_chart(fig_kde)

# Streamgraph
if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å Streamgraph"):
    st.subheader("Streamgraph")
    stream_x = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Å–∏ X (Streamgraph):", Data.columns)
    stream_y = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Å–∏ Y (Streamgraph):", Data.columns)
    fig_stream = px.area(Data, x=stream_x, y=stream_y, title=f"Streamgraph: {stream_x} vs {stream_y}")
    st.plotly_chart(fig_stream)

# üìä 1. 3D-—Ä–æ–∑–ø–æ–¥—ñ–ª –∞–ª–∫–æ–≥–æ–ª—é —Ç–∞ –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—ñ
fig = px.scatter_3d(Data, x='alcohol', y='pH', z='volatile acidity', color='quality',
                     title="üìä 3D-—Ä–æ–∑–ø–æ–¥—ñ–ª –∞–ª–∫–æ–≥–æ–ª—é, pH —Ç–∞ –ª–µ—Ç–∫–æ—ó –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—ñ",
                     opacity=0.7)
st.plotly_chart(fig)

# üé® 2. Heatmap –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é –∑–º—ñ–Ω —Ä—ñ–≤–Ω—è pH (—ñ–º—ñ—Ç–∞—Ü—ñ—è —Ç—Ä–µ–Ω–¥—É)
fig = px.density_heatmap(Data, x="fixed acidity", y="pH", animation_frame="quality",
                         title="üé® –ó–º—ñ–Ω–∞ —Ä—ñ–≤–Ω—è pH –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—ñ (–∞–Ω—ñ–º–æ–≤–∞–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫)",
                         color_continuous_scale="Viridis")
st.plotly_chart(fig)

# üåÄ 3. –ü–æ–ª—è—Ä–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤–∏–Ω–∞
polar_data = Data.drop(columns=["quality", "type"]).mean()
angles = list(polar_data.index) + [polar_data.index[0]]
values = list(polar_data) + [polar_data[0]]
fig = go.Figure()
fig.add_trace(go.Scatterpolar(r=values, theta=angles, fill='toself', name='–°–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è'))
fig.update_layout(title="üåÄ –ü–æ–ª—è—Ä–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ —Å–µ—Ä–µ–¥–Ω—ñ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤–∏–Ω–∞")
st.plotly_chart(fig)

# üé≠ 4. Swarm plot (—Ä–æ—î–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫) –∞–ª–∫–æ–≥–æ–ª—é vs —è–∫–æ—Å—Ç—ñ
fig, ax = plt.subplots(figsize=(8, 6))
sns.swarmplot(x=Data["quality"], y=Data["alcohol"], ax=ax)
ax.set_title("üé≠ Swarm Plot: –ê–ª–∫–æ–≥–æ–ª—å vs –Ø–∫—ñ—Å—Ç—å –≤–∏–Ω–∞")
ax.set_xlabel("–û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ")
ax.set_ylabel("–ê–ª–∫–æ–≥–æ–ª—å (%)")
st.pyplot(fig)

# üîÄ 5. Correlation dendrogram (–¥–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ–π –º—ñ–∂ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏)
Data_numeric = Data.select_dtypes(include=[float, int])  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
corr = Data_numeric.corr()

fig, ax = plt.subplots(figsize=(10, 5))
dist = 1 - corr  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –≤ –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
linkage_matrix = sch.linkage(dist, method='ward')

sch.dendrogram(linkage_matrix, labels=corr.columns, leaf_rotation=90, ax=ax)
ax.set_title("üîÄ –î–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ–π –º—ñ–∂ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –≤–∏–Ω–∞")
st.pyplot(fig)

# üìà 6. KDE-–≥—Ä–∞—Ñ—ñ–∫ –≤–∑–∞—î–º–æ–∑–≤'—è–∑–∫—É –∞–ª–∫–æ–≥–æ–ª—é —Ç–∞ —Ä—ñ–≤–Ω—è pH
fig, ax = plt.subplots(figsize=(8, 6))
sns.kdeplot(x=Data["alcohol"], y=Data["pH"], cmap="mako", fill=True, ax=ax)
ax.set_title("üìà KDE-–≥—Ä–∞—Ñ—ñ–∫: –ê–ª–∫–æ–≥–æ–ª—å vs pH")
ax.set_xlabel("–ê–ª–∫–æ–≥–æ–ª—å (%)")
ax.set_ylabel("pH")
st.pyplot(fig)

# üìå 7. Lollipop chart (–ª—å–æ–¥—è–Ω–∏–∫–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞) –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
importance = abs(Data_numeric.corr()["quality"]).sort_values(ascending=False)
fig, ax = plt.subplots(figsize=(8, 6))
ax.stem(importance.index, importance.values)
ax.set_title("üìå –í–∞–∂–ª–∏–≤—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è —è–∫–æ—Å—Ç—ñ –≤–∏–Ω–∞ (Lollipop chart)")
ax.set_ylabel("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∫–æ—Ä–µ–ª—è—Ü—ñ—ó –∑ —è–∫—ñ—Å—Ç—é")
st.pyplot(fig)

# üé¢ 8. Streamgraph (–≥—Ä–∞—Ñ—ñ–∫ –ø–æ—Ç–æ–∫—ñ–≤) —Ä–æ–∑–ø–æ–¥—ñ–ª—É —Ç–∏–ø—ñ–≤ –≤–∏–Ω–∞
fig = px.area(Data.groupby(["quality", "type"]).size().reset_index(name="count"),
              x="quality", y="count", color="type", line_group="type",
              title="üé¢ Streamgraph: –¢–∏–ø –≤–∏–Ω–∞ –∑–∞ —è–∫—ñ—Å—Ç—é")
st.plotly_chart(fig)

# üéØ 9. Bullseye chart (–º—ñ—à–µ–Ω—å) ‚Äì —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –∞–ª–∫–æ–≥–æ–ª—é —Ç–∞ –ª–µ—Ç–∫–æ—ó –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—ñ
fig, ax = plt.subplots(figsize=(6, 6))
sns.scatterplot(x=Data["alcohol"], y=Data["volatile acidity"], hue=Data["quality"], s=100, edgecolor="k", ax=ax)
ax.set_title("üéØ Bullseye chart: –ê–ª–∫–æ–≥–æ–ª—å vs –õ–µ—Ç–∫–∞ –∫–∏—Å–ª–æ—Ç–Ω—ñ—Å—Ç—å")
ax.set_xlabel("–ê–ª–∫–æ–≥–æ–ª—å (%)")
ax.set_ylabel("–õ–µ—Ç–∫–∞ –∫–∏—Å–ª–æ—Ç–Ω—ñ—Å—Ç—å")
st.pyplot(fig)

# üß© 10. Mosaic plot –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —Ç–∏–ø—É –≤–∏–Ω–∞ —Ç–∞ —è–∫–æ—Å—Ç—ñ
Data["quality"] = Data["quality"].astype(str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
Data["type"] = Data["type"].astype(str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

fig, ax = plt.subplots(figsize=(8, 6))
mosaic(Data, ["type", "quality"], ax=ax)
ax.set_title("üß© Mosaic Plot: –¢–∏–ø –≤–∏–Ω–∞ vs –Ø–∫—ñ—Å—Ç—å")
st.pyplot(fig)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —á–µ—Ä–µ–∑ PyCaret
model = load_model('C:/Users/Dasha/final_rf_model')

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü 'type' –≤ —á–∏—Å–ª–æ–≤–æ–π
label_encoder = LabelEncoder()
Data['type'] = label_encoder.fit_transform(Data['type'])

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
y_test = Data['quality']
X_test = Data.drop(columns=['quality'])
predictions = predict_model(model, data=X_test)
y_pred = predictions['prediction_label']

# üìå –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª—ñ
st.header("üìå –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª—ñ")

y_test = y_test.astype(float)
y_pred = y_pred.astype(float)

# üîπ 1. –¢–æ—á–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ (Accuracy)
accuracy = accuracy_score(y_test, y_pred)
st.write(f"### üîπ –¢–æ—á–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ (Accuracy): **{accuracy:.4f}**")

# üîπ 2. Precision, Recall, F1-score
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

st.write(f"### üîπ Precision: **{precision:.4f}**")
st.write(f"### üîπ Recall: **{recall:.4f}**")
st.write(f"### üîπ F1-score: **{f1:.4f}**")

# üîπ 3. –ü–æ–≤–Ω–∏–π –∑–≤—ñ—Ç –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
st.text("### üìã Classification Report:")
st.text(classification_report(y_test, y_pred, zero_division=0))

# üìä –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è
st.header("üìä –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è")

# üîπ 1. –ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª—É —è–∫–æ—Å—Ç—ñ –≤–∏–Ω–∞
fig, ax = plt.subplots()
sns.histplot(Data['quality'], bins=7, kde=True, ax=ax)
ax.set_title('üìä –†–æ–∑–ø–æ–¥—ñ–ª —è–∫–æ—Å—Ç—ñ –≤–∏–Ω–∞')
ax.set_xlabel('–û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ –≤–∏–Ω–∞')
ax.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑—Ä–∞–∑–∫—ñ–≤')
st.pyplot(fig)

# üîπ 2. –ú–∞—Ç—Ä–∏—Ü—è –ø–æ–º–∏–ª–æ–∫
fig, ax = plt.subplots()
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues', ax=ax)
ax.set_xlabel('–ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è')
ax.set_ylabel('–†–µ–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è')
ax.set_title('–ú–∞—Ç—Ä–∏—Ü—è –ø–æ–º–∏–ª–æ–∫')
st.pyplot(fig)

# üîπ 3. –í–∑–∞—î–º–æ–∑–≤‚Äô—è–∑–æ–∫ –∞–ª–∫–æ–≥–æ–ª—é —Ç–∞ —è–∫–æ—Å—Ç—ñ –≤–∏–Ω–∞
fig, ax = plt.subplots()
sns.scatterplot(x=Data['alcohol'], y=Data['quality'], ax=ax)
ax.set_title('–ê–ª–∫–æ–≥–æ–ª—å vs –Ø–∫—ñ—Å—Ç—å –≤–∏–Ω–∞')
ax.set_xlabel('–ê–ª–∫–æ–≥–æ–ª—å (%)')
ax.set_ylabel('–û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ')
st.pyplot(fig)

# üîπ 4. –ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è
fig, ax = plt.subplots()
sns.heatmap(Data.corr(), annot=True, cmap='coolwarm', fmt=".2f", ax=ax)
ax.set_title('–ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤–∏–Ω–∞')
st.pyplot(fig)

# üîπ 5. –ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ —Ä—ñ–≤–Ω—è pH
fig, ax = plt.subplots()
sns.histplot(Data['pH'], bins=20, kde=True, ax=ax)
ax.set_title('–†–æ–∑–ø–æ–¥—ñ–ª —Ä—ñ–≤–Ω—è pH')
ax.set_xlabel('pH')
ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
st.pyplot(fig)

# üîπ 6. Boxplot: –ê–ª–∫–æ–≥–æ–ª—å vs –Ø–∫—ñ—Å—Ç—å
fig, ax = plt.subplots()
sns.boxplot(x=Data['quality'], y=Data['alcohol'], ax=ax)
ax.set_title('Boxplot: –ê–ª–∫–æ–≥–æ–ª—å vs –Ø–∫—ñ—Å—Ç—å –≤–∏–Ω–∞')
ax.set_xlabel('–û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ')
ax.set_ylabel('–ê–ª–∫–æ–≥–æ–ª—å (%)')
st.pyplot(fig)

# üîπ 7. –ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ –∑–∞–ª–∏—à–∫–æ–≤–æ–≥–æ —Ü—É–∫—Ä—É
fig, ax = plt.subplots()
sns.histplot(Data['residual sugar'], bins=30, kde=True, ax=ax)
ax.set_title('–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞–ª–∏—à–∫–æ–≤–æ–≥–æ —Ü—É–∫—Ä—É')
ax.set_xlabel('–ó–∞–ª–∏—à–∫–æ–≤–∏–π —Ü—É–∫–æ—Ä (–≥/–ª)')
ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
st.pyplot(fig)

# üîπ 8. –ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ –ª–µ—Ç–∫–æ—ó –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—ñ
fig, ax = plt.subplots()
sns.histplot(Data['volatile acidity'], bins=30, kde=True, ax=ax)
ax.set_title('–†–æ–∑–ø–æ–¥—ñ–ª –ª–µ—Ç–∫–æ—ó –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—ñ')
ax.set_xlabel('–õ–µ—Ç–∫–∞ –∫–∏—Å–ª–æ—Ç–Ω—ñ—Å—Ç—å')
ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
st.pyplot(fig)

# üîπ 9. –ü–∞—Ä–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
st.write("### –ü–∞—Ä–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
st.pyplot(sns.pairplot(Data[['alcohol', 'pH', 'volatile acidity', 'residual sugar', 'quality']], hue='quality'))

# üîπ 10. –ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ —Å—É–ª—å—Ñ–∞—Ç—ñ–≤
fig, ax = plt.subplots()
sns.histplot(Data['sulphates'], bins=30, kde=True, ax=ax)
ax.set_title('–†–æ–∑–ø–æ–¥—ñ–ª —Å—É–ª—å—Ñ–∞—Ç—ñ–≤')
ax.set_xlabel('–°—É–ª—å—Ñ–∞—Ç–∏')
ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
st.pyplot(fig)

# üîπ 11. Boxplot: –ö–∏—Å–ª–æ—Ç–Ω—ñ—Å—Ç—å vs –Ø–∫—ñ—Å—Ç—å
fig, ax = plt.subplots()
sns.boxplot(x=Data['quality'], y=Data['fixed acidity'], ax=ax)
ax.set_title('Boxplot: –ö–∏—Å–ª–æ—Ç–Ω—ñ—Å—Ç—å vs –Ø–∫—ñ—Å—Ç—å –≤–∏–Ω–∞')
ax.set_xlabel('–û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ')
ax.set_ylabel('–§—ñ–∫—Å–æ–≤–∞–Ω–∞ –∫–∏—Å–ª–æ—Ç–Ω—ñ—Å—Ç—å')
st.pyplot(fig)


# -*- coding: utf-8 -*-
"""
Created on Tue Apr  1 17:01:19 2025

@author: smirn
"""
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pycaret.datasets import get_data
from pycaret.classification import load_model, predict_model

import warnings
warnings.filterwarnings("ignore", message="missing ScriptRunContext")

# 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
st.title(" –ê–Ω–∞–ª—ñ–∑ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å—å–∫–∏—Ö –≤–∏–±–æ—Ä—ñ–≤ —É –°–®–ê")
data = get_data('us_presidential_election_results')
st.write("–ü–µ—Ä—à—ñ 5 —Ä—è–¥–∫—ñ–≤ –¥–∞—Ç–∞—Å–µ—Ç—É:")
st.write(data.head())

# 2. –û–ø–∏—Å –æ–∑–Ω–∞–∫
st.subheader("–û–ø–∏—Å –æ–∑–Ω–∞–∫ –¥–∞—Ç–∞—Å–µ—Ç—É")
description = {
    'cycle': '–†—ñ–∫ –≤–∏–±–æ—Ä—á–æ–≥–æ —Ü–∏–∫–ª—É',
    'state': '–®—Ç–∞—Ç',
    'dem_poll_avg': '–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–µ–º–æ–∫—Ä–∞—Ç—ñ–≤ —É –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è—Ö (%)',
    'dem_poll_avg_margin': '–í—ñ–¥—Å—Ç–∞–Ω—å –¥–µ–º–æ–∫—Ä–∞—Ç—ñ–≤ –≤—ñ–¥ —Ä–µ—Å–ø—É–±–ª—ñ–∫–∞–Ω—Ü—ñ–≤ —É –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è—Ö (%-–ø.)',
    'incumbent_party': '–ü–∞—Ä—Ç—ñ—è —á–∏–Ω–Ω–æ–≥–æ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞',
    'incumbent_running': '–ß–∏–Ω–Ω–∏–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –±–∞–ª–æ—Ç—É—î—Ç—å—Å—è (1 - —Ç–∞–∫, 0 - –Ω—ñ)',
    'party_winner': '–ü–µ—Ä–µ–º–æ–∂–Ω–∞ –ø–∞—Ä—Ç—ñ—è —É —à—Ç–∞—Ç—ñ'
}
st.table(pd.DataFrame.from_dict(description, orient='index', columns=['–û–ø–∏—Å']))

# 3. –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
st.header("üìä –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö")

# –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ä–æ–∫–æ–º
selected_cycle = st.select_slider("–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫ –≤–∏–±–æ—Ä—ñ–≤:", options=sorted(data['cycle'].unique()))
filtered_data = data[data['cycle'] == selected_cycle]

# –†–æ–∑–ø–æ–¥—ñ–ª –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –ø–æ —à—Ç–∞—Ç–∞—Ö
st.subheader(f"–†–æ–∑–ø–æ–¥—ñ–ª –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –ø–æ —à—Ç–∞—Ç–∞—Ö —É {selected_cycle} —Ä–æ—Ü—ñ")
fig, ax = plt.subplots(figsize=(10, 6))
party_dist = filtered_data['party_winner'].value_counts()
sns.barplot(x=party_dist.index, y=party_dist.values, ax=ax)
ax.set_xlabel("–ü–∞—Ä—Ç—ñ—è")
ax.set_ylabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —à—Ç–∞—Ç—ñ–≤")
ax.set_title(f"–†–æ–∑–ø–æ–¥—ñ–ª –ø–µ—Ä–µ–º–æ–≥ –ø–æ –ø–∞—Ä—Ç—ñ—è—Ö —É {selected_cycle} —Ä–æ—Ü—ñ")
st.pyplot(fig)

# –¢–µ–ø–ª–æ–∫–∞—Ä—Ç–∞ —Å–µ—Ä–µ–¥–Ω—ñ—Ö —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤ –¥–µ–º–æ–∫—Ä–∞—Ç—ñ–≤
st.subheader(f"–¢–æ–ø —à—Ç–∞—Ç—ñ–≤ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º –¥–µ–º–æ–∫—Ä–∞—Ç—ñ–≤ —É {selected_cycle} —Ä–æ—Ü—ñ")
top_states = filtered_data.nlargest(10, 'dem_poll_avg')[['state', 'dem_poll_avg']]
fig, ax = plt.subplots(figsize=(10, 6))
sns.barplot(x='dem_poll_avg', y='state', data=top_states, ax=ax)
ax.set_xlabel("–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–µ–º–æ–∫—Ä–∞—Ç—ñ–≤ (%)")
ax.set_ylabel("–®—Ç–∞—Ç")
st.pyplot(fig)

# –í–ø–ª–∏–≤ —á–∏–Ω–Ω–æ–≥–æ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
st.subheader("–í–ø–ª–∏–≤ —á–∏–Ω–Ω–æ–≥–æ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏")
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

# –ì—Ä–∞—Ñ—ñ–∫ 1: –ß–∏–Ω–Ω–∏–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –±–∞–ª–æ—Ç—É—î—Ç—å—Å—è
incumbent_running = filtered_data.groupby(['incumbent_running', 'party_winner']).size().unstack()
incumbent_running.plot(kind='bar', stacked=True, ax=ax1)
ax1.set_xlabel("–ß–∏–Ω–Ω–∏–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –±–∞–ª–æ—Ç—É—î—Ç—å—Å—è")
ax1.set_ylabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —à—Ç–∞—Ç—ñ–≤")
ax1.set_xticks([0, 1], ['–ù—ñ', '–¢–∞–∫'], rotation=0)

# –ì—Ä–∞—Ñ—ñ–∫ 2: –ü–∞—Ä—Ç—ñ—è —á–∏–Ω–Ω–æ–≥–æ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
incumbent_party = filtered_data.groupby(['incumbent_party', 'party_winner']).size().unstack()
incumbent_party.plot(kind='bar', stacked=True, ax=ax2)
ax2.set_xlabel("–ü–∞—Ä—Ç—ñ—è —á–∏–Ω–Ω–æ–≥–æ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞")
ax2.set_ylabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —à—Ç–∞—Ç—ñ–≤")

plt.tight_layout()
st.pyplot(fig)

# –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —à—Ç–∞—Ç–æ–º
selected_state = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —à—Ç–∞—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:", options=data['state'].unique())
state_data = data[data['state'] == selected_state]

# –Ü—Å—Ç–æ—Ä–∏—á–Ω–∞ –¥–∏–Ω–∞–º—ñ–∫–∞ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ —à—Ç–∞—Ç—É
st.subheader(f"–Ü—Å—Ç–æ—Ä–∏—á–Ω–∞ –¥–∏–Ω–∞–º—ñ–∫–∞ –¥–ª—è —à—Ç–∞—Ç—É {selected_state}")
fig, ax1 = plt.subplots(figsize=(12, 6))

# –ì—Ä–∞—Ñ—ñ–∫ —Ä–µ–π—Ç–∏–Ω–≥—É –¥–µ–º–æ–∫—Ä–∞—Ç—ñ–≤
ax1.plot(state_data['cycle'], state_data['dem_poll_avg'], 'b-', label='–†–µ–π—Ç–∏–Ω–≥ –¥–µ–º–æ–∫—Ä–∞—Ç—ñ–≤')
ax1.set_xlabel("–†—ñ–∫")
ax1.set_ylabel("–†–µ–π—Ç–∏–Ω–≥ –¥–µ–º–æ–∫—Ä–∞—Ç—ñ–≤ (%)", color='b')
ax1.tick_params('y', colors='b')

# –ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ
ax2 = ax1.twinx()
ax2.plot(state_data['cycle'], state_data['dem_poll_avg_margin'], 'r--', label='–í—ñ–¥—Å—Ç–∞–Ω—å –≤—ñ–¥ —Ä–µ—Å–ø—É–±–ª—ñ–∫–∞–Ω—Ü—ñ–≤')
ax2.set_ylabel("–í—ñ–¥—Å—Ç–∞–Ω—å (%-–ø.)", color='r')
ax2.tick_params('y', colors='r')

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
for idx, row in state_data.iterrows():
    color = 'blue' if row['party_winner'] == 'democrat' else 'red'
    ax1.axvline(x=row['cycle'], color=color, alpha=0.2)

fig.tight_layout()
st.pyplot(fig)

# 4. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Ç–∞ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
try:
    st.header(" –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
    model = load_model('election_poll_predictor')
    
    # –í–∏–±—ñ—Ä –¥–∞–Ω–∏—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É
    st.subheader("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è:")
    col1, col2, col3 = st.columns(3)
    with col1:
        dem_poll = st.slider("–†–µ–π—Ç–∏–Ω–≥ –¥–µ–º–æ–∫—Ä–∞—Ç—ñ–≤ (%)", 0.0, 100.0, 50.0)
    with col2:
        dem_margin = st.slider("–í—ñ–¥—Å—Ç–∞–Ω—å –≤—ñ–¥ —Ä–µ—Å–ø—É–±–ª—ñ–∫–∞–Ω—Ü—ñ–≤ (%-–ø.)", -50.0, 50.0, 0.0)
    with col3:
        incumbent_run = st.selectbox("–ß–∏–Ω–Ω–∏–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –±–∞–ª–æ—Ç—É—î—Ç—å—Å—è?", [0, 1])
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É
    input_data = pd.DataFrame({
        'dem_poll_avg': [dem_poll],
        'dem_poll_avg_margin': [dem_margin],
        'incumbent_running': [incumbent_run]
    })
    
    # –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
    prediction = predict_model(model, data=input_data)
    winner = "–î–µ–º–æ–∫—Ä–∞—Ç–∏" if prediction['prediction_label'][0] == 'democrat' else "–†–µ—Å–ø—É–±–ª—ñ–∫–∞–Ω—Ü—ñ"
    confidence = prediction['prediction_score'][0] * 100
    
    st.success(f"–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∏–π –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å: {winner} (–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {confidence:.1f}%)")
    
except Exception as e:
    st.warning(f"–ú–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")

# –í–∏—Å–Ω–æ–≤–æ–∫
st.header("–í–∏—Å–Ω–æ–≤–æ–∫")
st.write("""
–£ —Ö–æ–¥—ñ –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å—å–∫—ñ –≤–∏–±–æ—Ä–∏ –≤ –°–®–ê –±—É–ª–æ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–æ:
- –†–æ–∑–ø–æ–¥—ñ–ª –ø–µ—Ä–µ–º–æ–≥ –º—ñ–∂ –ø–∞—Ä—Ç—ñ—è–º–∏ –ø–æ —Ä–æ–∫–∞—Ö —ñ —à—Ç–∞—Ç–∞—Ö
- –î–∏–Ω–∞–º—ñ–∫—É —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤
- –í–ø–ª–∏–≤ —á–∏–Ω–Ω–æ–≥–æ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–±–æ—Ä—ñ–≤
- –Ü—Å—Ç–æ—Ä–∏—á–Ω—ñ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—ó –¥–ª—è –æ–∫—Ä–µ–º–∏—Ö —à—Ç–∞—Ç—ñ–≤

–î–æ–¥–∞—Ç–æ–∫ –¥–æ–∑–≤–æ–ª—è—î —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –¥–æ—Å–ª—ñ–¥–∂—É–≤–∞—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ –≤–∏–±–æ—Ä—á–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É.
""")